name: Auto Tag with Semantic Versioning

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/*'
      - 'release/*'
      - 'rc/*'

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

      # Set up .NET
    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0'  # Adjust depending on your project requirements

      # Install GitVersion.Tool
    - name: Install GitVersion.Tool
      run: |
        dotnet tool install --global GitVersion.Tool
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        dotnet-gitversion -version

      # Fetch tags and debug git fetch
    - name: Fetch tags and Debug
      run: |
        echo "Fetching tags from the remote repository..."
        git fetch --tags -v  # Added verbose flag to give detailed information on fetch
        git status           # Check if repository is in a clean state and if any changes are pending

      # Run GitVersion to get the version number
    - name: Run GitVersion
      id: gitversion
      run: |
        VERSION=$(dotnet-gitversion /showvariable FullSemVer)
        echo "Version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Adjust version for alpha, beta, rc, or feature tags based on branch
    - name: Adjust Version for Pre-release or Feature
      id: adjust_version
      run: |
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
        VERSION=${{ env.VERSION }}

        if [[ "$BRANCH_NAME" == "develop" ]]; then
          VERSION="${VERSION}-alpha.${GITHUB_RUN_NUMBER}"
        elif [[ "$BRANCH_NAME" == "release/"* ]]; then
          VERSION="${VERSION}-beta.${GITHUB_RUN_NUMBER}"
        elif [[ "$BRANCH_NAME" == "rc/"* ]]; then
          VERSION="${VERSION}-rc.${GITHUB_RUN_NUMBER}"
        elif [[ "$BRANCH_NAME" == feature/* ]]; then
          FEATURE_NAME=$(echo $BRANCH_NAME | sed 's/feature\///')
          VERSION="${VERSION}-feature${FEATURE_NAME}.${GITHUB_RUN_NUMBER}"
        fi

        echo "Pre-release version: $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Create Git tag
    - name: Create Git Tag
      run: |
        git tag $VERSION
        git push origin $VERSION

      # Optionally: Create GitHub Release
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: build_output.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
