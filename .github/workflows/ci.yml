name: Auto Tag with Semantic Versioning

on:
  push:
    branches:
      - main
      - master
      - develop
      - 'feature/*'
      - 'release/*'
      - 'rc/*'

permissions:
  contents: write  # Allow write access to the repository for pushing tags and making changes

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 #Ensures the full history is fetched

      # Set up .NET
    - name: Set up .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0'  # Adjust depending on your project requirements

      # Install GitVersion.Tool
    - name: Install GitVersion.Tool
      run: |
        dotnet tool install --global GitVersion.Tool
        echo "$HOME/.dotnet/tools" >> $GITHUB_PATH
        dotnet-gitversion -version  # Ensure dotnet-gitversion is working

      # Fetch tags and debug git fetch
    - name: Fetch tags and Debug
      run: |
        echo "Fetching tags from the remote repository..."
        git fetch --tags -v  # Added verbose flag to give detailed information on fetch
        git status           # Check if repository is in a clean state and if any changes are pending
    - name: Clear GitVersion cache
      run: |
        rm -rf .git/gitversion_cache
      # Run GitVersion to get the version number
    - name: Run GitVersion and debug
      id: gitversion
      run: |
        set -x  # Enable debugging to print commands and outputs
        VERSION=$(dotnet-gitversion /showvariable FullSemVer)
        echo "Version: $VERSION"
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
      shell: bash
      env:
        DOTNET_ROOT: /home/runner/.dotnet



      # Create Git tag
    - name: Create Git Tag
      run: |
        git tag $VERSION
        git push https://github.com/${{ github.repository }} $VERSION  # Push tag with authentication

        # Create GitHub Release (Ensure tag exists before release)
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}  # Use the correct tag from the environment variable
        files: build_output.zip  # Replace with your actual build output file(s)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Make sure the token is passed for authentication